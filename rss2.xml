<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mark&#39;s blogs</title>
    <link>http://marksblog.cn/</link>
    
    <atom:link href="http://marksblog.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>心之所向，行之可往</description>
    <pubDate>Thu, 11 May 2023 11:45:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LeetCode-101-对称二叉树</title>
      <link>http://marksblog.cn/posts/d8d7d1c6/</link>
      <guid>http://marksblog.cn/posts/d8d7d1c6/</guid>
      <pubDate>Thu, 11 May 2023 11:44:51 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-1-DFS实现&quot;&gt;&lt;a href=&quot;#1-1-DFS实现&quot; class=&quot;headerlink&quot; title=&quot;1.1 DFS实现&quot;&gt;&lt;/a&gt;1.1 DFS实现&lt;/h2&gt;&lt;p&gt;此处的轴对称问题，重点在于要明白如何进行比较，对于两个子树，首先是对比子树的根节点是否相等，接下来的对比过程应该是对比左边的左孩子和右边的右孩子是否相等，然后再左右交换。重点是在于明白对比的过程，然后就能否简单的基于递归实现。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-101-对称二叉树"><a href="#LeetCode-101-对称二叉树" class="headerlink" title="LeetCode 101 对称二叉树"></a>LeetCode 101 对称二叉树</h1><p><a href="https://leetcode.cn/problems/symmetric-tree/">101.对称二叉树</a></p><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><h2 id="1-1-DFS实现"><a href="#1-1-DFS实现" class="headerlink" title="1.1 DFS实现"></a>1.1 DFS实现</h2><p>此处的轴对称问题，重点在于要明白如何进行比较，对于两个子树，首先是对比子树的根节点是否相等，接下来的对比过程应该是对比左边的左孩子和右边的右孩子是否相等，然后再左右交换。重点是在于明白对比的过程，然后就能否简单的基于递归实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Symmetric</span><span class="params">(TreeNode *node1,TreeNode *node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1 &amp;&amp; node2 &amp;&amp; node1-&gt;val==node2-&gt;val)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Symmetric</span>(node1-&gt;left,node2-&gt;right)&amp;&amp;<span class="built_in">Symmetric</span>(node1-&gt;right,node2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!node1&amp;&amp;!node2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 基于DFS实现</span></span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Symmetric</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-基于迭代实现"><a href="#1-2-基于迭代实现" class="headerlink" title="1.2 基于迭代实现"></a>1.2 基于迭代实现</h2><p>使用一个队列，首先将根节点入队两次，每次出队两个连续的元素，再入队时采取交替入队的当时，假设node1和node2是队列中的初始状态，那么先两个元素出队，然后node1-&gt;left入队，node2-&gt;right入队。（本质上还是在利用轴对称的特性） 此处额外需要注意的就是对左右子树的是否为空需要进行额外的判断。在出队时进行值的判断，在入队时主要进行是否为空的判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 基于BFS实现</span></span><br><span class="line">       queue&lt;TreeNode*&gt; q;</span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">           TreeNode *node1=q.<span class="built_in">front</span>();</span><br><span class="line">           q.<span class="built_in">pop</span>();</span><br><span class="line">           <span class="keyword">if</span>(q.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           TreeNode *node2=q.<span class="built_in">front</span>();</span><br><span class="line">           q.<span class="built_in">pop</span>();</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;val!=node2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;left&amp;&amp;node2-&gt;right)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node1-&gt;left);</span><br><span class="line">                q.<span class="built_in">push</span>(node2-&gt;right);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(!node1-&gt;left&amp;&amp;node2-&gt;right||node1-&gt;left&amp;&amp;!node2-&gt;right)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;right&amp;&amp;node2-&gt;left)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node1-&gt;right);</span><br><span class="line">                q.<span class="built_in">push</span>(node2-&gt;left);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(!node1-&gt;right&amp;&amp;node2-&gt;left||node1-&gt;right&amp;&amp;!node2-&gt;left)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/d8d7d1c6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-37-解数独</title>
      <link>http://marksblog.cn/posts/7cec8f62/</link>
      <guid>http://marksblog.cn/posts/7cec8f62/</guid>
      <pubDate>Thu, 11 May 2023 11:41:49 GMT</pubDate>
      
      <description>&lt;p&gt;本质上就是给定一个 $9&#92;times9$ 的二维矩阵，使用1-9对该二维矩阵进行补全。在补全矩阵后需要保证，在矩阵的每一行每一列中都不存在重复元素。并且在9个 $3&#92;times3$ 的小方框中不存在重复的元素。并且这样的求解有且仅有一个。&lt;/p&gt;
&lt;p&gt;采取逐行放置的方式：设计一个递归地回溯函数  &lt;code&gt;bool backtrack(int row,int col,vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board)&lt;/code&gt; ，向函数传递的参数值为 &lt;code&gt;row&lt;/code&gt; 行号和 &lt;code&gt;col&lt;/code&gt; 列号，每一次仅填写 &lt;code&gt;board[row][col]&lt;/code&gt;  位置处的元素，返回值为bool类型，表示本地递归是否找到了可行的解。首先判断 &lt;code&gt;board[row][col]&lt;/code&gt; 位置处的元素是否是 &lt;code&gt;.&lt;/code&gt; 若不是，则直接 &lt;code&gt;col+1&lt;/code&gt; 向下递归，并且直接返回递归函数的返回值。&lt;/p&gt;
&lt;p&gt;若是则使用一个hash &lt;code&gt;used[9]&lt;/code&gt; 记录，在 &lt;code&gt;board[row][col]&lt;/code&gt; 处那些元素是使用过的。首先是按行列进行统计，再按 $3&#92;times3$ 的宫格进行统计。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; used[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board[row].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();i++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 处理行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[row][i]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) used[board[row][i]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();i++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 处理列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][col]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) used[board[i][col]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 处理粗线宫格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=row/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;row/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;j&amp;lt;col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            used[board[i][j]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-37-解数独"><a href="#LeetCode-37-解数独" class="headerlink" title="LeetCode 37 解数独"></a>LeetCode 37 解数独</h1><p><a href="https://leetcode.cn/problems/sudoku-solver/">37.解数独</a></p><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 遵循如下规则：</p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</p><ol><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 ‘.’</li><li>题目数据保证输入数独仅有一个解</li></ol><h2 id="回溯递归"><a href="#回溯递归" class="headerlink" title="回溯递归"></a>回溯递归</h2><p>本质上就是给定一个 $9\times9$ 的二维矩阵，使用1-9对该二维矩阵进行补全。在补全矩阵后需要保证，在矩阵的每一行每一列中都不存在重复元素。并且在9个 $3\times3$ 的小方框中不存在重复的元素。并且这样的求解有且仅有一个。</p><p>采取逐行放置的方式：设计一个递归地回溯函数  <code>bool backtrack(int row,int col,vector&lt;vector&lt;char&gt;&gt;&amp; board)</code> ，向函数传递的参数值为 <code>row</code> 行号和 <code>col</code> 列号，每一次仅填写 <code>board[row][col]</code>  位置处的元素，返回值为bool类型，表示本地递归是否找到了可行的解。首先判断 <code>board[row][col]</code> 位置处的元素是否是 <code>.</code> 若不是，则直接 <code>col+1</code> 向下递归，并且直接返回递归函数的返回值。</p><p>若是则使用一个hash <code>used[9]</code> 记录，在 <code>board[row][col]</code> 处那些元素是使用过的。首先是按行列进行统计，再按 $3\times3$ 的宫格进行统计。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> used[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board[row].<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理行</span></span><br><span class="line">    <span class="keyword">if</span>(board[row][i]!=<span class="string">&#x27;.&#x27;</span>) used[board[row][i]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理列</span></span><br><span class="line">    <span class="keyword">if</span>(board[i][col]!=<span class="string">&#x27;.&#x27;</span>) used[board[i][col]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理粗线宫格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=row/<span class="number">3</span>*<span class="number">3</span>;i&lt;row/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=col/<span class="number">3</span>*<span class="number">3</span>;j&lt;col/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            used[board[i][j]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成统计后则开始尝试向 <code>board[row][col]</code> 处填入元素，填入元素后 <code>col+1</code> 向下递归。</p><p>当 <code>col==board.size()</code> 时说明当前 <code>row</code> 行已经填完，那么 <code>backtrack(row+1,0, board)</code> 向下递归。并且将递归函数的结果直接返回，递归结束的条件： <code>row==board.size()</code> 时，说明已经完成了矩阵中全部元素的处理。</p><p>总体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==board.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(col==board.<span class="built_in">size</span>())&#123; <span class="comment">// row行完成填写</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row+<span class="number">1</span>,<span class="number">0</span>,board))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(board[row][col]!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">// 已填数字</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row,col+<span class="number">1</span>,board))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> used[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board[row].<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理行</span></span><br><span class="line">            <span class="keyword">if</span>(board[row][i]!=<span class="string">&#x27;.&#x27;</span>) used[board[row][i]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理列</span></span><br><span class="line">            <span class="keyword">if</span>(board[i][col]!=<span class="string">&#x27;.&#x27;</span>) used[board[i][col]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理粗线宫格</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=row/<span class="number">3</span>*<span class="number">3</span>;i&lt;row/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=col/<span class="number">3</span>*<span class="number">3</span>;j&lt;col/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    used[board[i][j]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">                board[row][col]=<span class="string">&#x27;1&#x27;</span>+i;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row,col+<span class="number">1</span>,board))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                board[row][col]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">backtrack</span>(<span class="number">0</span>,<span class="number">0</span>,board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一种处理思路：在递归函数中使用双层的for循环，按照行进行处理，每次逐行去寻找第一个未被填入的元素，向其中填入相应的元素，并判断填入的元素是否合法。</p>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/7cec8f62/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-51-N皇后</title>
      <link>http://marksblog.cn/posts/3f5ed361/</link>
      <guid>http://marksblog.cn/posts/3f5ed361/</guid>
      <pubDate>Tue, 09 May 2023 13:54:30 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;双hash-回溯递归&quot;&gt;&lt;a href=&quot;#双hash-回溯递归&quot; class=&quot;headerlink&quot; title=&quot;双hash+回溯递归&quot;&gt;&lt;/a&gt;双hash+回溯递归&lt;/h2&gt;&lt;p&gt;此处采取逐行去填充元素位置的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bool col[9]=&amp;#123;false&amp;#125;;&lt;/code&gt; 记录那些列被使用了，通过记录和逐行填充的方式实现了行列的不冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; pos;&lt;/code&gt; 记录每一行所使用的列号用于判断是否会出现的在同一斜线上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本的递归流程：递归的参数为 &lt;code&gt;n,cur&lt;/code&gt; 分表表示皇后的个数和当前处理的行数（从0开始），那么当 &lt;code&gt;cur==n&lt;/code&gt; 时递归结束，将本次递归的结果集加入到结果集中。 &lt;code&gt;cur&lt;/code&gt; 行放置位置的选取，从0开始逐个判断，是否和前面已选元素在同行和同列，或者在一条斜线上，不是则选取后递归，递归返回后再进行回溯。&lt;/p&gt;
&lt;p&gt;是否在同一斜线上的判断：利用 &lt;code&gt;pos&lt;/code&gt; 数组进行判断，主要是看二维坐标中的点，行距和列距是否相同。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSlash&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 第i行，第j列处的元素是否和前面的元素处于同一斜线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;a:pos)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a.first-i)==&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a.second-j)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-51-N皇后"><a href="#LeetCode-51-N皇后" class="headerlink" title="LeetCode 51 N皇后"></a>LeetCode 51 N皇后</h1><p><a href="https://leetcode.cn/problems/n-queens/">51.N皇后</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位</p><h2 id="双hash-回溯递归"><a href="#双hash-回溯递归" class="headerlink" title="双hash+回溯递归"></a>双hash+回溯递归</h2><p>此处采取逐行去填充元素位置的方式：</p><ol><li><code>bool col[9]=&#123;false&#125;;</code> 记录那些列被使用了，通过记录和逐行填充的方式实现了行列的不冲突</li><li><code>vector&lt;pair&lt;int,int&gt;&gt; pos;</code> 记录每一行所使用的列号用于判断是否会出现的在同一斜线上</li></ol><p>基本的递归流程：递归的参数为 <code>n,cur</code> 分表表示皇后的个数和当前处理的行数（从0开始），那么当 <code>cur==n</code> 时递归结束，将本次递归的结果集加入到结果集中。 <code>cur</code> 行放置位置的选取，从0开始逐个判断，是否和前面已选元素在同行和同列，或者在一条斜线上，不是则选取后递归，递归返回后再进行回溯。</p><p>是否在同一斜线上的判断：利用 <code>pos</code> 数组进行判断，主要是看二维坐标中的点，行距和列距是否相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSlash</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123; <span class="comment">// 第i行，第j列处的元素是否和前面的元素处于同一斜线</span></span><br><span class="line">        <span class="keyword">if</span>(pos.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a.first-i)==<span class="built_in">abs</span>(a.second-j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总体代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">    vector&lt;string&gt; tmp;</span><br><span class="line">    <span class="type">bool</span> col[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; pos;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSlash</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123; <span class="comment">// 第i行，第j列处的元素是否和前面的元素处于同一斜线</span></span><br><span class="line">        <span class="keyword">if</span>(pos.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a.first-i)==<span class="built_in">abs</span>(a.second-j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> cur,<span class="type">int</span> n)</span></span>&#123; <span class="comment">// 逐行放置</span></span><br><span class="line">        <span class="keyword">if</span>(cur==n)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// cur行位置的选取</span></span><br><span class="line">            <span class="keyword">if</span>(!col[i]&amp;&amp;!<span class="built_in">isSlash</span>(cur,i))&#123; <span class="comment">// 和前面的行，不在同一列，并且不在同一斜线</span></span><br><span class="line">                col[i]=<span class="literal">true</span>;</span><br><span class="line">                pos.<span class="built_in">push_back</span>(&#123;cur,i&#125;);</span><br><span class="line">                <span class="function">string <span class="title">s</span><span class="params">(n,<span class="string">&#x27;.&#x27;</span>)</span></span>;</span><br><span class="line">                s[i]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(s);</span><br><span class="line">                <span class="built_in">DFS</span>(cur+<span class="number">1</span>,n);</span><br><span class="line">                col[i]=<span class="literal">false</span>;</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">                pos.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">DFS</span>(<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/3f5ed361/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-104-111-二叉树的最大最小深度</title>
      <link>http://marksblog.cn/posts/c76534fb/</link>
      <guid>http://marksblog.cn/posts/c76534fb/</guid>
      <pubDate>Mon, 08 May 2023 14:28:02 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&quot;&gt;104.二叉树的最大深度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-104-111-二叉树的最大最小深度"><a href="#LeetCode-104-111-二叉树的最大最小深度" class="headerlink" title="LeetCode 104 111 二叉树的最大最小深度"></a>LeetCode 104 111 二叉树的最大最小深度</h1><h2 id="1-1-二叉树的最大深度"><a href="#1-1-二叉树的最大深度" class="headerlink" title="1.1 二叉树的最大深度"></a>1.1 二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度</a></p><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><h3 id="1-1-1-DFS实现"><a href="#1-1-1-DFS实现" class="headerlink" title="1.1.1 DFS实现"></a>1.1.1 DFS实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left),<span class="built_in">maxDepth</span>(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-BFS实现"><a href="#1-1-2-BFS实现" class="headerlink" title="1.1.2 BFS实现"></a>1.1.2 BFS实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       queue&lt;TreeNode*&gt; q;</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">           <span class="type">int</span> n=q.<span class="built_in">size</span>();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               TreeNode* node=q.<span class="built_in">front</span>();</span><br><span class="line">               q.<span class="built_in">pop</span>();</span><br><span class="line">               <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">               <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">           &#125;</span><br><span class="line">           depth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-二叉树的最小深度"><a href="#1-2-二叉树的最小深度" class="headerlink" title="1.2 二叉树的最小深度"></a>1.2 二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111.二叉树的最小深度</a></p><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><h3 id="1-2-1-DFS实现"><a href="#1-2-1-DFS实现" class="headerlink" title="1.2.1 DFS实现"></a>1.2.1 DFS实现</h3><p>相对复杂的遍历实现方式：找到叶子节点，就算深度，寻找最小深度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> min_d=<span class="number">2147483647</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(TreeNode* root,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right)&#123;</span><br><span class="line">                min_d=<span class="built_in">min</span>(min_d,depth);   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">DFS</span>(root-&gt;left,depth);</span><br><span class="line">            <span class="built_in">DFS</span>(root-&gt;right,depth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">DFS</span>(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> min_d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问题划分实现：返回左右子树的最小深度。此处和最大深度之间存在一个差别，每次返回子树的最小深度+1的处理方式，只有当结点的左右子树都非空的情况才是正确的。当只有一个节点时，需要返回的是存在节点的大小。(主要是需要处理好空节点的问题，不能单纯的选取最小，应该在两颗子树非空的情况下选取最小)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> min_d=INT_MAX;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">            min_d=<span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left),min_d);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">            min_d=<span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;right),min_d);       </span><br><span class="line">        <span class="keyword">return</span> min_d+<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-BFS实现"><a href="#1-2-2-BFS实现" class="headerlink" title="1.2.2 BFS实现"></a>1.2.2 BFS实现</h3><p>BFS的方式层序遍历的，那么对于最小深度的叶节点一定是最先的入队，那么只需要找到第一个入队的叶节点即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span>  n=q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">                TreeNode *node=q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(!node-&gt;left&amp;&amp;!node-&gt;right) <span class="keyword">return</span> depth+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/c76534fb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-332-重新安排行程</title>
      <link>http://marksblog.cn/posts/880c5c7b/</link>
      <guid>http://marksblog.cn/posts/880c5c7b/</guid>
      <pubDate>Mon, 08 May 2023 14:27:03 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;空间换时间&quot;&gt;&lt;a href=&quot;#空间换时间&quot; class=&quot;headerlink&quot; title=&quot;空间换时间&quot;&gt;&lt;/a&gt;空间换时间&lt;/h2&gt;&lt;p&gt;使用一个 &lt;code&gt;map&lt;/code&gt; 完成有序地映射，从而在每一层根据出发地选取机票时，都能够优先选取目的地字典序最小的机票，此处本质上是一个图，并且题设告知存在路径。使用一个 &lt;code&gt;unordered_map&amp;lt;string,map&amp;lt;string,int&amp;gt;&amp;gt; tic_map&lt;/code&gt; 去进行记录，本质上是 &lt;code&gt;unordered_map&amp;lt;出发地,map&amp;lt;目的地,机票数&amp;gt;&amp;gt; tic_map&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;那么首先在结果数组 &lt;code&gt;res&lt;/code&gt; 中加入一个 &lt;code&gt;JFK&lt;/code&gt; 作为出发地，那么在每一层递归中只需要在 &lt;code&gt;tic_map[res.back()]&lt;/code&gt; 中选取机票，此时优先选到的机票一定是字典序在前的。那么在每次优先选取最优的基础上，那么就一定能够找到最有路径。在找到最有路径后递归结束。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-332-重新安排行程"><a href="#LeetCode-332-重新安排行程" class="headerlink" title="LeetCode 332 重新安排行程"></a>LeetCode 332 重新安排行程</h1><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">332.重新安排行程</a></p><p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [fromi, toi]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><ul><li>例如，行程 <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> 与 <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code> 相比就更小，排序更靠前。</li></ul><p>假定所有机票至少存在一种合理的行程。且所有的机票必须都用一次且只能用一次。</p><h2 id="暴力回溯递归"><a href="#暴力回溯递归" class="headerlink" title="暴力回溯递归"></a>暴力回溯递归</h2><p>最简单的方式为，穷举出全部合法的情况，然后筛选出字典序最小的：一个hash记录票的使用，一个string记录行程，一个 <code>vector&lt;string&gt;</code> 记录全部的合法序列，然后使用回溯的方式暴力递归。</p><p>但是在LeetCode中将会超出时间限制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> used[<span class="number">300</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets,<span class="type">int</span> cur,string pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==tickets.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string min=<span class="string">&quot;ZZZ&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tickets[i].<span class="built_in">front</span>()==<span class="string">&quot;JFK&quot;</span>&amp;&amp;tickets[i].<span class="built_in">back</span>()&lt;=min)&#123;</span><br><span class="line">                    path+=<span class="string">&quot;JFK&quot;</span>;</span><br><span class="line">                    path+=tickets[i].<span class="built_in">back</span>();</span><br><span class="line">                    used[i]=<span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">DFS</span>(tickets,cur+<span class="number">1</span>,tickets[i].<span class="built_in">back</span>());</span><br><span class="line">                    <span class="keyword">if</span>(flag) min=tickets[i].<span class="built_in">back</span>();</span><br><span class="line">                    used[i]=<span class="literal">false</span>;</span><br><span class="line">                    path=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tickets[i].<span class="built_in">front</span>()==pre&amp;&amp;!used[i]&amp;&amp;tickets[i].<span class="built_in">back</span>()&lt;=min)&#123;</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                path+=tickets[i].<span class="built_in">back</span>();</span><br><span class="line">                <span class="built_in">DFS</span>(tickets,cur+<span class="number">1</span>,tickets[i].<span class="built_in">back</span>());</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(flag) min=tickets[i].<span class="built_in">back</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;path.<span class="built_in">pop_back</span>(),j++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">DFS</span>(tickets,<span class="number">0</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        string min=res.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;res.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            min = min&gt;res[i]?res[i]:min;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; journey;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;min.<span class="built_in">size</span>()/<span class="number">3</span>;i++)&#123;</span><br><span class="line">            journey.<span class="built_in">push_back</span>(min.<span class="built_in">substr</span>(i*<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> journey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="空间换时间"><a href="#空间换时间" class="headerlink" title="空间换时间"></a>空间换时间</h2><p>使用一个 <code>map</code> 完成有序地映射，从而在每一层根据出发地选取机票时，都能够优先选取目的地字典序最小的机票，此处本质上是一个图，并且题设告知存在路径。使用一个 <code>unordered_map&lt;string,map&lt;string,int&gt;&gt; tic_map</code> 去进行记录，本质上是 <code>unordered_map&lt;出发地,map&lt;目的地,机票数&gt;&gt; tic_map</code> 。</p><p>那么首先在结果数组 <code>res</code> 中加入一个 <code>JFK</code> 作为出发地，那么在每一层递归中只需要在 <code>tic_map[res.back()]</code> 中选取机票，此时优先选到的机票一定是字典序在前的。那么在每次优先选取最优的基础上，那么就一定能够找到最有路径。在找到最有路径后递归结束。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string,map&lt;string,<span class="type">int</span>&gt;&gt; tic_map;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> ticnum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="built_in">size</span>()==ticnum+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string dep=res.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:tic_map[dep])&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.second&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(a.first);</span><br><span class="line">                a.second--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">backtracking</span>(ticnum))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">                a.second++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> vector&lt;string&gt;&amp; vec : tickets) &#123;</span><br><span class="line">            tic_map[vec[<span class="number">0</span>]][vec[<span class="number">1</span>]]++; <span class="comment">// 记录映射关系</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        <span class="built_in">backtracking</span>(tickets.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/880c5c7b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-222-完全二叉树的节点数</title>
      <link>http://marksblog.cn/posts/df6206fa/</link>
      <guid>http://marksblog.cn/posts/df6206fa/</guid>
      <pubDate>Sun, 07 May 2023 15:47:01 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-2-利用完全二叉树的性质实现&quot;&gt;&lt;a href=&quot;#1-2-利用完全二叉树的性质实现&quot; class=&quot;headerlink&quot; title=&quot;1.2 利用完全二叉树的性质实现&quot;&gt;&lt;/a&gt;1.2 利用完全二叉树的性质实现&lt;/h2&gt;&lt;p&gt;希望能够在小于 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.215ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 1863 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(485,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(874,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1474,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 的时间复杂度内实现。（换句话说：能否在 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;8.053ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 3559.6 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(485,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(874,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1172,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(1657,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(510,-150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2570.6,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3170.6,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 的时间复杂度内实现。）重点在于最后一层，在前面层都是一个满二叉树。&lt;/p&gt;
&lt;p&gt;从深度的角度出发计算：充分利用二叉树的性质，分别计算左右子树的深度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若是左右子树的深度相等，那么左子树一定是满二叉树，再处理右子树。&lt;/li&gt;
&lt;li&gt;不相等只可能是左大于右，那么右子树是满二叉树，此时在递归处理右子树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于完全二叉树存在如下性质：完全二叉树的子树也是完全二叉树。&lt;/p&gt;
&lt;p&gt;针对上述性质可以推出一个特殊的求解树的深度的方式：从根节点开始不断向左查找即可得到完全二叉树的深度。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-222-完全二叉树的节点数"><a href="#LeetCode-222-完全二叉树的节点数" class="headerlink" title="LeetCode 222 完全二叉树的节点数"></a>LeetCode 222 完全二叉树的节点数</h1><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222.完全二叉树的节点数</a></p><p>给你一棵完全二叉树的根节点root，求出该树的节点个数。</p><p>完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> ~ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.24ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 990.3 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g></g></svg></mjx-container> 个节点。</p><h2 id="1-1-遍历实现-DFS-BFS"><a href="#1-1-遍历实现-DFS-BFS" class="headerlink" title="1.1 遍历实现 DFS+BFS"></a>1.1 遍历实现 DFS+BFS</h2><p>DFS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root){</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left)+<span class="built_in">countNodes</span>(root-&gt;right)+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>BFS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){</span><br><span class="line">            <span class="type">int</span> n=q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(n--){</span><br><span class="line">                TreeNode *node=q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="1-2-利用完全二叉树的性质实现"><a href="#1-2-利用完全二叉树的性质实现" class="headerlink" title="1.2 利用完全二叉树的性质实现"></a>1.2 利用完全二叉树的性质实现</h2><p>希望能够在小于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.215ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1863 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(874,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1474,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的时间复杂度内实现。（换句话说：能否在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.053ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3559.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(874,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1657,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mi" transform="translate(2570.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3170.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的时间复杂度内实现。）重点在于最后一层，在前面层都是一个满二叉树。</p><p>从深度的角度出发计算：充分利用二叉树的性质，分别计算左右子树的深度。</p><ul><li>若是左右子树的深度相等，那么左子树一定是满二叉树，再处理右子树。</li><li>不相等只可能是左大于右，那么右子树是满二叉树，此时在递归处理右子树。</li></ul><p>对于完全二叉树存在如下性质：完全二叉树的子树也是完全二叉树。</p><p>针对上述性质可以推出一个特殊的求解树的深度的方式：从根节点开始不断向左查找即可得到完全二叉树的深度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDepth</span><span class="params">(TreeNode *root)</span></span>{</span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root){</span><br><span class="line">            depth++;</span><br><span class="line">            root=root-&gt;left;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> d_left=<span class="built_in">getDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> d_right=<span class="built_in">getDepth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(d_left==d_right){ <span class="comment">// 当前左子树是满的</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;d_left)+<span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">        }<span class="keyword">else</span>{ <span class="comment">// 右子树是满的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">countNodes</span>(root-&gt;left)+(<span class="number">1</span>&lt;&lt;d_right);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/df6206fa/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-110-平衡二叉树</title>
      <link>http://marksblog.cn/posts/4641027c/</link>
      <guid>http://marksblog.cn/posts/4641027c/</guid>
      <pubDate>Sun, 07 May 2023 15:45:01 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-2-DFS自底向上搜索&quot;&gt;&lt;a href=&quot;#1-2-DFS自底向上搜索&quot; class=&quot;headerlink&quot; title=&quot;1.2 DFS自底向上搜索&quot;&gt;&lt;/a&gt;1.2 DFS自底向上搜索&lt;/h2&gt;&lt;p&gt;本质思想就是先判断子树是否是平衡二叉树，当子树是一颗平衡二叉树时，希望能够返回树的深度（如何返回二叉树的深度）。若是子树不平衡，那么整个树一定都是不平衡的。&lt;/p&gt;
&lt;p&gt;关于深度的计算：当前节点为空时，直接返回0值，当前节点非空，则需要判断，需要理解递归的思想，在当前节点的两颗子树都是平衡二叉树时，只需要返回max深度+1即可。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-110-平衡二叉树"><a href="#LeetCode-110-平衡二叉树" class="headerlink" title="LeetCode 110 平衡二叉树"></a>LeetCode 110 平衡二叉树</h1><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">110.平衡二叉树</a></p><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><h2 id="1-1-DFS自顶向下暴力法实现"><a href="#1-1-DFS自顶向下暴力法实现" class="headerlink" title="1.1 DFS自顶向下暴力法实现"></a>1.1 DFS自顶向下暴力法实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDepth</span><span class="params">(TreeNode *root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">getDepth</span>(root-&gt;left),<span class="built_in">getDepth</span>(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> d_l=<span class="built_in">getDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> d_r=<span class="built_in">getDepth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(d_r-d_l)&lt;=<span class="number">1</span>&amp;&amp;<span class="built_in">isBalanced</span>(root-&gt;left)&amp;&amp;<span class="built_in">isBalanced</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此处存在时间复杂度的浪费，在深度计算上还存在这优化的空间。在计算深度时存在这对统一节点深度的反复计算。</p><h2 id="1-2-DFS自底向上搜索"><a href="#1-2-DFS自底向上搜索" class="headerlink" title="1.2 DFS自底向上搜索"></a>1.2 DFS自底向上搜索</h2><p>本质思想就是先判断子树是否是平衡二叉树，当子树是一颗平衡二叉树时，希望能够返回树的深度（如何返回二叉树的深度）。若是子树不平衡，那么整个树一定都是不平衡的。</p><p>关于深度的计算：当前节点为空时，直接返回0值，当前节点非空，则需要判断，需要理解递归的思想，在当前节点的两颗子树都是平衡二叉树时，只需要返回max深度+1即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">balance</span><span class="params">(TreeNode *root)</span></span>&#123;  <span class="comment">// 判断子树是否平衡的同时返回深度值，实际上就是获取到深度后再判断，-1表示不平衡</span></span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="type">int</span> bl=<span class="built_in">balance</span>(root-&gt;left);</span><br><span class="line">            <span class="type">int</span> br=<span class="built_in">balance</span>(root-&gt;right);</span><br><span class="line">            <span class="keyword">return</span> (bl!=<span class="number">-1</span>&amp;&amp;br!=<span class="number">-1</span>&amp;&amp;<span class="built_in">abs</span>(bl-br)&lt;=<span class="number">1</span>)?<span class="built_in">max</span>(br,bl)+<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;  <span class="comment">// 在总体的函数中就只需要进行简单的判断</span></span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> bl=<span class="built_in">balance</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> br=<span class="built_in">balance</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> (bl!=<span class="number">-1</span>&amp;&amp;br!=<span class="number">-1</span>&amp;&amp;<span class="built_in">abs</span>(bl-br)&lt;=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/4641027c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-257-二叉树的所有路径</title>
      <link>http://marksblog.cn/posts/15552c94/</link>
      <guid>http://marksblog.cn/posts/15552c94/</guid>
      <pubDate>Sun, 07 May 2023 15:39:41 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-paths/&quot;&gt;257.二叉树的所有路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。&lt;/p&gt;
&lt;p&gt;叶子节点 是指没有子节点的节点&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-257-二叉树的所有路径"><a href="#LeetCode-257-二叉树的所有路径" class="headerlink" title="LeetCode 257 二叉树的所有路径"></a>LeetCode 257 二叉树的所有路径</h1><p><a href="https://leetcode.cn/problems/binary-tree-paths/">257.二叉树的所有路径</a></p><p>给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。</p><p>叶子节点 是指没有子节点的节点</p><h2 id="1-1-后序非递归实现"><a href="#1-1-后序非递归实现" class="headerlink" title="1.1 后序非递归实现"></a>1.1 后序非递归实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 经典的后序非递归实现</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line">        vector&lt;TreeNode*&gt; s;</span><br><span class="line">        TreeNode* pre=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(root||!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root)&#123;</span><br><span class="line">                s.<span class="built_in">push_back</span>(root);</span><br><span class="line">                root=root-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode* node=s.<span class="built_in">back</span>();</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right&amp;&amp;node-&gt;right!=pre)&#123;</span><br><span class="line">                root=node-&gt;right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!node-&gt;right&amp;&amp;!node-&gt;left)&#123;</span><br><span class="line">                    string path;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">                        path+=(<span class="built_in">to_string</span>(s[i]-&gt;val)+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                    path+=<span class="built_in">to_string</span>(s[s.<span class="built_in">size</span>()<span class="number">-1</span>]-&gt;val);</span><br><span class="line">                    res.<span class="built_in">push_back</span>(path);</span><br><span class="line">                &#125;</span><br><span class="line">                pre=node;</span><br><span class="line">                s.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此处也可以改写为使用递归方式实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">construct_path</span><span class="params">(TreeNode* root,string path,vector&lt;string&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right)&#123;</span><br><span class="line">                path+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">                res.<span class="built_in">push_back</span>(path);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path+=(<span class="built_in">to_string</span>(root-&gt;val)+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            <span class="built_in">construct_path</span>(root-&gt;left,path,res);</span><br><span class="line">            <span class="built_in">construct_path</span>(root-&gt;right,path,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 经典的后序非递归实现</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">construct_path</span>(root,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-基于BFS实现"><a href="#1-2-基于BFS实现" class="headerlink" title="1.2 基于BFS实现"></a>1.2 基于BFS实现</h2><p>此处采取的完全是穷举的方式，创建一个路径队列，用于逐步生成全部的路径，当出栈元素是一个孩子节点时，将生成的路径加入到结果集。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 经典的后序非递归实现</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q_node;</span><br><span class="line">        queue&lt;string&gt; q_path;</span><br><span class="line">        q_node.<span class="built_in">push</span>(root);</span><br><span class="line">        q_path.<span class="built_in">push</span>(<span class="built_in">to_string</span>(root-&gt;val));</span><br><span class="line">        <span class="keyword">while</span>(!q_node.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* node=q_node.<span class="built_in">front</span>();</span><br><span class="line">            string path=q_path.<span class="built_in">front</span>();</span><br><span class="line">            q_node.<span class="built_in">pop</span>();</span><br><span class="line">            q_path.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;left&amp;&amp;!node-&gt;right)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left)&#123;</span><br><span class="line">                q_node.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                q_path.<span class="built_in">push</span>(path+<span class="string">&quot;-&gt;&quot;</span>+<span class="built_in">to_string</span>(node-&gt;left-&gt;val));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right)&#123;</span><br><span class="line">                q_node.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                q_path.<span class="built_in">push</span>(path+<span class="string">&quot;-&gt;&quot;</span>+<span class="built_in">to_string</span>(node-&gt;right-&gt;val));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/15552c94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-513-找树左下角的值</title>
      <link>http://marksblog.cn/posts/fae63bb5/</link>
      <guid>http://marksblog.cn/posts/fae63bb5/</guid>
      <pubDate>Sun, 07 May 2023 15:38:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-1-BFS实现&quot;&gt;&lt;a href=&quot;#1-1-BFS实现&quot; class=&quot;headerlink&quot; title=&quot;1.1 BFS实现&quot;&gt;&lt;/a&gt;1.1 BFS实现&lt;/h2&gt;&lt;p&gt;此处的条件实际上可以简化为，先找到最低层的树节点，然后输出最左边的节点&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-513-找树左下角的值"><a href="#LeetCode-513-找树左下角的值" class="headerlink" title="LeetCode 513 找树左下角的值"></a>LeetCode 513 找树左下角的值</h1><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513.找树左下角的值</a></p><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><h2 id="1-1-BFS实现"><a href="#1-1-BFS实现" class="headerlink" title="1.1 BFS实现"></a>1.1 BFS实现</h2><p>此处的条件实际上可以简化为，先找到最低层的树节点，然后输出最左边的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size=q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode* node=q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                res=node-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-DFS实现"><a href="#1-2-DFS实现" class="headerlink" title="1.2 DFS实现"></a>1.2 DFS实现</h2><p>在DFS实现中，对于最低层的最左端节点，一定是当前层第一个被访问的，那么使用一个pair分别记录层数和第一个被访问的节点的数值。（本质上都是暴力法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(TreeNode *node,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">if</span>(depth&gt;res.first)&#123;</span><br><span class="line">                res=&#123;depth,node-&gt;val&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">DFS</span>(node-&gt;left,depth);</span><br><span class="line">            <span class="built_in">DFS</span>(node-&gt;right,depth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">DFS</span>(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/fae63bb5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-654-最大二叉树</title>
      <link>http://marksblog.cn/posts/74305938/</link>
      <guid>http://marksblog.cn/posts/74305938/</guid>
      <pubDate>Sun, 07 May 2023 15:36:28 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-2-单调栈实现&quot;&gt;&lt;a href=&quot;#1-2-单调栈实现&quot; class=&quot;headerlink&quot; title=&quot;1.2 单调栈实现&quot;&gt;&lt;/a&gt;1.2 单调栈实现&lt;/h2&gt;&lt;p&gt;将构造的过程转化为基于节点数和数组实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始时，我们只有一个根节点，其中存储了整个数组；&lt;/li&gt;
&lt;li&gt;在每一步操作中，我们可以「任选」一个存储了超过一个数的节点，找出其中的最大值并存储在该节点。最大值左侧的数组部分下放到该节点的左子节点，右侧的数组部分下放到该节点的右子节点；&lt;/li&gt;
&lt;li&gt;如果所有的节点都恰好存储了一个数，那么构造结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此处，在题解中提出，在进行树的构造过程中，并不需要按照最大二叉树的定义进行构造，实际上在上述的定义中，存在一个特性：对于最大的节点一定是根节点，第二大的节点则一定是根节点的左/右孩子，但是对于第三大的节点就存在不确定性。&lt;/p&gt;
&lt;p&gt;构造方式：每次选择数组中值最大的那个节点进行构造。这样一来，我们就可以保证按照数组中元素降序排序的顺序依次构造每个节点。当选择节点中的数组最大值为nums[i]时，说明大于nums[i]的元素已经全部构造，小于的元素还没有构造。&lt;/p&gt;
&lt;p&gt;在最终构造出的树上，以nums[i] 为根节点的子树，在原数组中对应的区间，左边界为nums[i] 左侧第一个比它大的元素所在的位置，右边界为nums[i] 右侧第一个比它大的元素所在的位置。左右边界均为开边界。如果某一侧边界不存在，则那一侧边界为数组的边界。如果两侧边界均不存在，说明其为最大值，即根节点。&lt;/p&gt;
&lt;p&gt;并且nums[i] 的父结点是两个边界中较小的那个元素对应的节点&lt;/p&gt;
&lt;p&gt;此处的思想就是，先找到相应的元素，然后确定当前元素在原来序列中的划分边界，并且有nums[i] 的父结点是两个边界中较小的那个元素对应的节点（左右孩子的问题则需要根据边界的位置来进行确定）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-654-最大二叉树"><a href="#LeetCode-654-最大二叉树" class="headerlink" title="LeetCode 654 最大二叉树"></a>LeetCode 654 最大二叉树</h1><p><a href="https://leetcode.cn/problems/maximum-binary-tree/">654.最大二叉树</a></p><p>给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:</p><ol><li>创建一个根节点，其值为 nums 中的最大值。</li><li>递归地在最大值 左边 的 子数组前缀上 构建左子树。</li><li>递归地在最大值 右边 的 子数组后缀上 构建右子树。</li></ol><p>返回 nums 构建的 最大二叉树 。</p><h2 id="1-1-DFS实现"><a href="#1-1-DFS实现" class="headerlink" title="1.1 DFS实现"></a>1.1 DFS实现</h2><p>直接根据题设的最大二叉树的定义进行构造，构造的过程是递归的，每次需要在指定的序列中寻找最大值，也就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2299.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(874,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1910.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的时间复杂度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">getMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>{</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; max={nums[start],start};</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start+<span class="number">1</span>;i&lt;=end;i++)</span><br><span class="line">        max=nums[i]&gt;max.first?<span class="built_in">make_pair</span>(nums[i],i):max;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(TreeNode* &amp;root,vector&lt;<span class="type">int</span>&gt;nums,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(start&lt;=end){</span><br><span class="line">            pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; max=<span class="built_in">getMax</span>(nums,start,end);</span><br><span class="line">            root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(max.first);</span><br><span class="line">            <span class="built_in">build</span>(root-&gt;left,nums,start,max.second<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">build</span>(root-&gt;right,nums,max.second+<span class="number">1</span>,end);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        TreeNode *root=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">build</span>(root,nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><h2 id="1-2-单调栈实现"><a href="#1-2-单调栈实现" class="headerlink" title="1.2 单调栈实现"></a>1.2 单调栈实现</h2><p>将构造的过程转化为基于节点数和数组实现：</p><ol><li>初始时，我们只有一个根节点，其中存储了整个数组；</li><li>在每一步操作中，我们可以「任选」一个存储了超过一个数的节点，找出其中的最大值并存储在该节点。最大值左侧的数组部分下放到该节点的左子节点，右侧的数组部分下放到该节点的右子节点；</li><li>如果所有的节点都恰好存储了一个数，那么构造结束。</li></ol><p>此处，在题解中提出，在进行树的构造过程中，并不需要按照最大二叉树的定义进行构造，实际上在上述的定义中，存在一个特性：对于最大的节点一定是根节点，第二大的节点则一定是根节点的左/右孩子，但是对于第三大的节点就存在不确定性。</p><p>构造方式：每次选择数组中值最大的那个节点进行构造。这样一来，我们就可以保证按照数组中元素降序排序的顺序依次构造每个节点。当选择节点中的数组最大值为nums[i]时，说明大于nums[i]的元素已经全部构造，小于的元素还没有构造。</p><p>在最终构造出的树上，以nums[i] 为根节点的子树，在原数组中对应的区间，左边界为nums[i] 左侧第一个比它大的元素所在的位置，右边界为nums[i] 右侧第一个比它大的元素所在的位置。左右边界均为开边界。如果某一侧边界不存在，则那一侧边界为数组的边界。如果两侧边界均不存在，说明其为最大值，即根节点。</p><p>并且nums[i] 的父结点是两个边界中较小的那个元素对应的节点</p><p>此处的思想就是，先找到相应的元素，然后确定当前元素在原来序列中的划分边界，并且有nums[i] 的父结点是两个边界中较小的那个元素对应的节点（左右孩子的问题则需要根据边界的位置来进行确定）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n, <span class="number">-1</span>)</span>, <span class="title">right</span><span class="params">(n, <span class="number">-1</span>)</span></span>; <span class="comment">// 存储边界的数组</span></span><br><span class="line">        <span class="function">vector&lt;TreeNode*&gt; <span class="title">tree</span><span class="params">(n)</span></span>; <span class="comment">// 保存树的节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            tree[i] = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[stk.<span class="built_in">back</span>()]) { <span class="comment">// 当前元素大于栈顶元素</span></span><br><span class="line">                right[stk.<span class="built_in">back</span>()] = i; <span class="comment">//对于栈顶元素而言，右侧第一个大于自己的元素找到了</span></span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>()) {<span class="comment">// 栈非空，说明此时栈顶元素大于当前元素，并且栈顶元素在当前元素的左边</span></span><br><span class="line">                left[i] = stk.<span class="built_in">back</span>(); <span class="comment">// 记录当前元素的左边界</span></span><br><span class="line">            }</span><br><span class="line">            stk.<span class="built_in">push_back</span>(i); <span class="comment">//将元素索引入栈</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 找到左右边界之后进行处理，此处就只需要顺序便利即可</span></span><br><span class="line">        TreeNode* root = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {  <span class="comment">// 本质上只需要在tree数组中进行便利</span></span><br><span class="line">            <span class="keyword">if</span> (left[i] == <span class="number">-1</span> &amp;&amp; right[i] == <span class="number">-1</span>) { <span class="comment">// 根节点</span></span><br><span class="line">                root = tree[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (right[i] == <span class="number">-1</span> || (left[i] != <span class="number">-1</span> &amp;&amp; nums[left[i]] &lt; nums[right[i]])) {</span><br><span class="line">                tree[left[i]]-&gt;right = tree[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                tree[right[i]]-&gt;left = tree[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>将上述实现改写为单调栈实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="function">vector&lt;TreeNode*&gt; <span class="title">tree</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            tree[i] = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[stk.<span class="built_in">back</span>()]) {</span><br><span class="line">                tree[i]-&gt;left = tree[stk.<span class="built_in">back</span>()]; <span class="comment">// 对于栈顶而言，当前元素i是自己的右边第一个比自己大的元素</span></span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>()) { <span class="comment">// 此时while循环不管有没有开始，都说明一个问题，栈顶元素是大于当前元素</span></span><br><span class="line">                tree[stk.<span class="built_in">back</span>()]-&gt;right = tree[i]; <span class="comment">// 对于节点i而言，当前栈顶元素是自己的左边第一个比自己大的元素</span></span><br><span class="line">            }</span><br><span class="line">            stk.<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tree[stk[<span class="number">0</span>]];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/74305938/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
