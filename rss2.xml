<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mark&#39;s blogs</title>
    <link>http://marksblog.cn/</link>
    
    <atom:link href="http://marksblog.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>心之所向，行之可往</description>
    <pubDate>Thu, 18 May 2023 12:21:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LeetCode-343-整数拆分</title>
      <link>http://marksblog.cn/posts/52c57120/</link>
      <guid>http://marksblog.cn/posts/52c57120/</guid>
      <pubDate>Thu, 18 May 2023 12:21:03 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;此处使用动态规划求解，首先需要确定的是问题的划分，对于整数 &lt;code&gt;n&lt;/code&gt; 拆分的方式存在多种 &lt;code&gt;1+n-1&lt;/code&gt; 或 &lt;code&gt;2+n-2&lt;/code&gt; ，同时也可以进一步对 &lt;code&gt;n-1&lt;/code&gt; 和 &lt;code&gt;n-2&lt;/code&gt; 进行拆分，此处使用一个动态规划数组 &lt;code&gt;dp[i]&lt;/code&gt; 来表示，将数字 &lt;code&gt;i&lt;/code&gt; 拆分为任意份后能够得到的最大乘积，那么对于数字 &lt;code&gt;n&lt;/code&gt; 的拆分为 $n-i$ 和 $i$ 的情形最大乘积求解存在三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;两个值都拆分的情形 $n=(n-i)+i$ 在此基础上将 $n-i$ 和 $i$ 进一步拆分为多个值的最大值 $n^1_{最大乘积}=dp[n-i]*dp[i]$ 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个值都不进行拆分的情况： $n=(n-i)+i$ 两个值都不进行拆分，那么 $n^2_{最大乘积}=(n-i)*i$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两个值一个拆分，另一个不拆分： $n=(n-i)+i$ 对 $n-i$ 进行拆分 $n^3_{最大乘积}=dp[n-i]&lt;em&gt;i$ 对 $i$ 进行拆分 $n^4_{最大乘积}=(n-i)&lt;/em&gt;dp[i]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上得到递推公式为：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[n]=max(max_{i}(n^1_{最大乘积},n^2_{最大乘积},n^3_{最大乘积},n^4_{最大乘积}))&lt;/script&gt;&lt;p&gt;其中 $i=1…n/2$&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-343-整数拆分"><a href="#LeetCode-343-整数拆分" class="headerlink" title="LeetCode 343 整数拆分"></a>LeetCode 343 整数拆分</h1><p><a href="https://leetcode.cn/problems/integer-break/">343.整数拆分</a></p><p>给定一个正整数 <code>n</code> ，将其拆分为 <code>k</code> 个正整数的和（ <code>k</code> &gt;= 2 ），并使这些整数的乘积最大化。</p><p>返回你可以获得的最大乘积 。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>此处使用动态规划求解，首先需要确定的是问题的划分，对于整数 <code>n</code> 拆分的方式存在多种 <code>1+n-1</code> 或 <code>2+n-2</code> ，同时也可以进一步对 <code>n-1</code> 和 <code>n-2</code> 进行拆分，此处使用一个动态规划数组 <code>dp[i]</code> 来表示，将数字 <code>i</code> 拆分为任意份后能够得到的最大乘积，那么对于数字 <code>n</code> 的拆分为 $n-i$ 和 $i$ 的情形最大乘积求解存在三种情况：</p><ol><li><p>两个值都拆分的情形 $n=(n-i)+i$ 在此基础上将 $n-i$ 和 $i$ 进一步拆分为多个值的最大值 $n^1_{最大乘积}=dp[n-i]*dp[i]$ 。</p></li><li><p>两个值都不进行拆分的情况： $n=(n-i)+i$ 两个值都不进行拆分，那么 $n^2_{最大乘积}=(n-i)*i$</p></li><li><p>两个值一个拆分，另一个不拆分： $n=(n-i)+i$ 对 $n-i$ 进行拆分 $n^3_{最大乘积}=dp[n-i]<em>i$ 对 $i$ 进行拆分 $n^4_{最大乘积}=(n-i)</em>dp[i]$</p></li></ol><p>在此基础上得到递推公式为：</p><script type="math/tex; mode=display">dp[n]=max(max_{i}(n^1_{最大乘积},n^2_{最大乘积},n^3_{最大乘积},n^4_{最大乘积}))</script><p>其中 $i=1…n/2$</p><p>在上述基础上使用动态规划求解：</p><ol><li><p>确定动态规划数组及其含义：使用长度为 <code>n</code> 的动态规划数组 <code>dp[n+1]</code> 其中 <code>dp[i]</code> 表示数字 <code>i</code> 对应的最大乘积值</p></li><li><p>确定递推公式： $dp[i]=max(max(n^1_{最大乘积},n^2_{最大乘积},n^3_{最大乘积},n^4_{最大乘积}))$ 其中 $j=1…i/2$</p></li><li><p>动态规划数组的初始化： <code>dp[0]=0，dp[1]=0</code></p></li><li><p>动态规划数组的遍历顺序：在推导 <code>dp[i]</code> 时，需要使用到前述的前部元素，从前向后推导。</p></li><li><p>举例实现： <code>n=3</code> 那么 <code>dp[2]=max(max(dp[1]*dp[1],1*1,dp[1]*1,1*dp[1]))=1</code> ，再计算 <code>dp[3]=max(max(dp[2]*dp[1],2*1,dp[2]*1,2*dp[1]))=2</code> ，计算正确。</p></li></ol><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getDp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;dp,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>,tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i/<span class="number">2</span>;j++)&#123;</span><br><span class="line">            tmp=<span class="built_in">max</span>(dp[i-j]*dp[j],(i-j)*j);</span><br><span class="line">            tmp=<span class="built_in">max</span>(dp[i-j]*j,tmp);</span><br><span class="line">            tmp=<span class="built_in">max</span>((i-j)*dp[j],tmp);</span><br><span class="line">            res=<span class="built_in">max</span>(res,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=<span class="built_in">getDp</span>(dp,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此处的拆分的情况还可以进行进一步的合并：对于两个数都拆分和两个数中仅拆分一个实际上是相同的。对于数字 $n$ 在 $n=n-i+i$ 的情况下，此处的要令 $i=1..n-1$ ，每次只需要对 $n-i$ 进行拆分即可实现全部情况的涵盖。当 $i=1$ 时，仅对 $n-1$ 拆分，实际上就计算了拆分数值包含1的全部情况，当 $i=2$ 时，仅对 $n-2$ 拆分，就计算的拆分数值包含2的全部情况。依次类推即可在在两种情况下完成计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                dp[i]=<span class="built_in">max</span>(dp[i],<span class="built_in">max</span>(j*(i-j),j*dp[i-j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/52c57120/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-63-不同路径II</title>
      <link>http://marksblog.cn/posts/8922dec9/</link>
      <guid>http://marksblog.cn/posts/8922dec9/</guid>
      <pubDate>Tue, 16 May 2023 12:30:22 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;此处相较于&lt;a href=&quot;https://leetcode.cn/problems/unique-paths/&quot;&gt;62.不同路径&lt;/a&gt;的不同之处在于网格中存在障碍物，那么在进行动态规划数组的推导时，将会存在不同之处，也对网格中值为 &lt;code&gt;0&lt;/code&gt; 的元素，依旧就是可以从上方和左方到达： &lt;code&gt;dp[i][j]=dp[i-1][j]+dp[i][j-1]&lt;/code&gt; ，对于网格中值为 &lt;code&gt;1&lt;/code&gt; 的位置应该将其置为不可达的状态： &lt;code&gt;dp[i][j]=0&lt;/code&gt; 。相应的，动态规划数组在初始化是也存在不同。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定动态规划数组： &lt;code&gt;dp[i][j]&lt;/code&gt; 表示从起点 &lt;code&gt;[0][0]&lt;/code&gt; 到达 &lt;code&gt;[i][j]&lt;/code&gt; 存在的路径数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态规划数组的推导方式： 首先判断 &lt;code&gt;obstacleGrid[i][j]==0?&lt;/code&gt; 若是成立，那么 &lt;code&gt;dp[i][j]=dp[i-1][j]+dp[i][j-1]&lt;/code&gt; ，不成立那么 &lt;code&gt;dp[i][j]=0&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态规划数组的初始化：依旧是对第一行和第一列进行初始化，在第一行中 &lt;code&gt;dp[0][0]=1&lt;/code&gt; 接下来判断 &lt;code&gt;obstacleGrid[0][j]==0?&lt;/code&gt; ，若是成立，那么 &lt;code&gt;dp[0][j]=1&lt;/code&gt; ，否则 &lt;code&gt;dp[0][j]=0&lt;/code&gt; 并且后续的 &lt;code&gt;dp[0][j]&lt;/code&gt; 也全部为0。对于第一列的初始化：判断 &lt;code&gt;obstacleGrid[i][0]==0?&lt;/code&gt; ，若是成立，那么 &lt;code&gt;dp[i][0]=1&lt;/code&gt; ，否则 &lt;code&gt;dp[i][0]=0&lt;/code&gt; 并且后续的 &lt;code&gt;dp[i][0]&lt;/code&gt; 也全部初始化为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组的遍历顺序：采取从前向后，逐行遍历的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;举例验证：&lt;code&gt;obstacleGrid = [[0,1],[0,0]]&lt;/code&gt; 那么初始为 &lt;code&gt;dp[0][0]=1,dp[0][1]=0,dp[1][0]=1&lt;/code&gt; 计算 &lt;code&gt;dp[1][1]=dp[0][1]+dp[1][0]=1&lt;/code&gt; 验证正确&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-63-不同路径-II"><a href="#LeetCode-63-不同路径-II" class="headerlink" title="LeetCode 63 不同路径 II"></a>LeetCode 63 不同路径 II</h1><p><a href="https://leetcode.cn/problems/unique-paths-ii/">63.不同路径II</a></p><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p><p><img src="不同路径II.png" alt="不同路径II"></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>此处相较于<a href="https://leetcode.cn/problems/unique-paths/">62.不同路径</a>的不同之处在于网格中存在障碍物，那么在进行动态规划数组的推导时，将会存在不同之处，也对网格中值为 <code>0</code> 的元素，依旧就是可以从上方和左方到达： <code>dp[i][j]=dp[i-1][j]+dp[i][j-1]</code> ，对于网格中值为 <code>1</code> 的位置应该将其置为不可达的状态： <code>dp[i][j]=0</code> 。相应的，动态规划数组在初始化是也存在不同。</p><ol><li><p>确定动态规划数组： <code>dp[i][j]</code> 表示从起点 <code>[0][0]</code> 到达 <code>[i][j]</code> 存在的路径数。</p></li><li><p>动态规划数组的推导方式： 首先判断 <code>obstacleGrid[i][j]==0?</code> 若是成立，那么 <code>dp[i][j]=dp[i-1][j]+dp[i][j-1]</code> ，不成立那么 <code>dp[i][j]=0</code> 。</p></li><li><p>动态规划数组的初始化：依旧是对第一行和第一列进行初始化，在第一行中 <code>dp[0][0]=1</code> 接下来判断 <code>obstacleGrid[0][j]==0?</code> ，若是成立，那么 <code>dp[0][j]=1</code> ，否则 <code>dp[0][j]=0</code> 并且后续的 <code>dp[0][j]</code> 也全部为0。对于第一列的初始化：判断 <code>obstacleGrid[i][0]==0?</code> ，若是成立，那么 <code>dp[i][0]=1</code> ，否则 <code>dp[i][0]=0</code> 并且后续的 <code>dp[i][0]</code> 也全部初始化为0。</p></li><li><p>数组的遍历顺序：采取从前向后，逐行遍历的方式</p></li><li><p>举例验证：<code>obstacleGrid = [[0,1],[0,0]]</code> 那么初始为 <code>dp[0][0]=1,dp[0][1]=0,dp[1][0]=1</code> 计算 <code>dp[1][1]=dp[0][1]+dp[1][0]=1</code> 验证正确</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">        <span class="type">int</span> m=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n=s[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        dp.<span class="built_in">resize</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>][i]==<span class="number">0</span>&amp;&amp;flag)&#123;</span><br><span class="line">                dp[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;flag)&#123;</span><br><span class="line">                dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用一维数组进行优化：依旧是使用一个一维数组作为行信息的记录，对于这个一维数组可以这样理解：对于 <code>dp[i-1]</code> 他所记录的是当前位置上方存在的路径， <code>dp[i]</code> 在更新之前所记录的是当前位置左方存在的路径，在更新之后记录的就是当前位置。此处就是在得到了第一行的信息之后去计算第二行的值。相较于<a href="https://leetcode.cn/problems/unique-paths/">62.不同路径</a>仅仅在于需要考虑障碍物问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n=s[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n&amp;&amp;s[<span class="number">0</span>][i]!=<span class="number">1</span>;i++) dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[j]=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[j]+=j==<span class="number">0</span>?<span class="number">0</span>:dp[j<span class="number">-1</span>]; <span class="comment">// 处理j=0的情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/8922dec9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-62-不同路径</title>
      <link>http://marksblog.cn/posts/d9271181/</link>
      <guid>http://marksblog.cn/posts/d9271181/</guid>
      <pubDate>Tue, 16 May 2023 11:37:49 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定动态规划数组的含义：定义二维动态规划数组 &lt;code&gt;dp[i][j]&lt;/code&gt; 表示到达途中 &lt;code&gt;i,j&lt;/code&gt; 位置处存在几条路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确定递推关系：由于在题中规定只能向下和向右移动，那么对于位置 &lt;code&gt;i，j&lt;/code&gt; 存在着两中到达的方式，第一种是从上方 &lt;code&gt;i-1,j&lt;/code&gt; 向下一步，第二种是从左边 &lt;code&gt;i,j-1&lt;/code&gt; 向右一步到达。那么 &lt;code&gt;dp[i][j]=dp[i-1][j]+dp[i][j-1]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态规划数组的初始化：首先是 &lt;code&gt;dp[0][0]&lt;/code&gt; 也就是起点，那么只有一条路径，初始化为 &lt;code&gt;dp[0][0]=1&lt;/code&gt; ，对于 &lt;code&gt;dp[i][0]&lt;/code&gt; 也就是最左边一列的元素，只能从起点处不断向下走 &lt;code&gt;dp[i][0]=1&lt;/code&gt; ，同理最上方一行 &lt;code&gt;dp[0][i]=1&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历方式：采取逐行或者逐列遍历的方式都是可行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;举例说明： &lt;code&gt;m = 3, n = 2&lt;/code&gt; ，首先完成初始化：&lt;code&gt;dp[0][0]=0,dp[1][0]=1,dp[2][0]=1,dp[0][1]=1&lt;/code&gt; 再基础上逐行进行推导：第2行 &lt;code&gt;dp[1][1]=dp[0][1]+dp[1][0]=2&lt;/code&gt; 在此基础上推导第三行： &lt;code&gt;dp[2][1]=dp[1][1]+dp[2][0]=3&lt;/code&gt; 验证正确。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-62-不同路径"><a href="#LeetCode-62-不同路径" class="headerlink" title="LeetCode 62 不同路径"></a>LeetCode 62 不同路径</h1><p><a href="https://leetcode.cn/problems/unique-paths/">62.不同路径</a></p><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><img src="LeetCode_62_不同路径.png" alt="LeetCode_62_不同路径"></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ol><li><p>确定动态规划数组的含义：定义二维动态规划数组 <code>dp[i][j]</code> 表示到达途中 <code>i,j</code> 位置处存在几条路径</p></li><li><p>确定递推关系：由于在题中规定只能向下和向右移动，那么对于位置 <code>i，j</code> 存在着两中到达的方式，第一种是从上方 <code>i-1,j</code> 向下一步，第二种是从左边 <code>i,j-1</code> 向右一步到达。那么 <code>dp[i][j]=dp[i-1][j]+dp[i][j-1]</code></p></li><li><p>动态规划数组的初始化：首先是 <code>dp[0][0]</code> 也就是起点，那么只有一条路径，初始化为 <code>dp[0][0]=1</code> ，对于 <code>dp[i][0]</code> 也就是最左边一列的元素，只能从起点处不断向下走 <code>dp[i][0]=1</code> ，同理最上方一行 <code>dp[0][i]=1</code> 。</p></li><li><p>遍历方式：采取逐行或者逐列遍历的方式都是可行的。</p></li><li><p>举例说明： <code>m = 3, n = 2</code> ，首先完成初始化：<code>dp[0][0]=0,dp[1][0]=1,dp[2][0]=1,dp[0][1]=1</code> 再基础上逐行进行推导：第2行 <code>dp[1][1]=dp[0][1]+dp[1][0]=2</code> 在此基础上推导第三行： <code>dp[2][1]=dp[1][1]+dp[2][0]=3</code> 验证正确。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">        dp.<span class="built_in">resize</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="comment">// 初始化第一行和第一列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            dp[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 递推动态规划数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++){</span><br><span class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j]+dp[i][j<span class="number">-1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>对空间复杂度进行优化：使用一维的数组作为滚动数组来替代原本的动态规划数组。创建一个动态规划数组 <code>dp[n]</code> 全部初始化为1，也就是对应这原本动态规划数组的第一列，那么在次基础上即可按行进行计算：第二行的第一个值 <code>dp[1][0]</code> ，此处的第二维为0，值一定为1，不需要进行计算。第二行的第二值 <code>dp[1][1]=dp[0][1]+dp[1][0]</code> 转化到一维数组就是 <code>dp[1]=dp[1]+dp[0]</code> 计算第二行的第三个数值： <code>dp[1][2]=dp[0][2]+dp[1][1]</code> 此处的 <code>dp[1][1]</code> 已经计算出了，并且 <code>dp[0][2]</code> 就是 <code>dp[2]</code> ，那么就是 <code>dp[2]=dp[2]+dp[1]</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">                dp[i] += dp[i - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>通过使用滚动数组的方式将空间复杂度削减到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><h2 id="组合数学求解"><a href="#组合数学求解" class="headerlink" title="组合数学求解"></a>组合数学求解</h2><p>从出发点 <code>[0,0]</code> 走到终点 <code>[m-1,n-1]</code> ，至少需要向下走 <code>m-1</code> 步，向右走 <code>n-1</code> 步，总结需要 <code>m+n-2</code> 步，那么求解总共有多少中走法，就将问题转化为了：在 <code>m+n-2</code> 步中选取 <code>m-1</code> 步作为向下走的步数，剩余的 <code>n-1</code> 步自然就作为向右走的步数，那么对应路径数就为：</p><script type="math/tex; mode=display">C_{m+n-2}^{m-1}=\left(\begin{array}{c}m+n-2 \\m-1\end{array}\right)=\frac{(m+n-2)(m+n-3) \cdots n}{(m-1) !}=\frac{(m+n-2) !}{(m-1) !(n-1) !}</script><p>那么要实现 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.804ex;" xmlns="http://www.w3.org/2000/svg" width="7.459ex" height="2.801ex" role="img" focusable="false" viewBox="0 -882.5 3296.9 1237.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-297.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2256,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3034,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container> 的求解，只需要使用一个for循环即可，并且对应的空间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n,j=<span class="number">1</span>;j&lt;m;i++,j++){</span><br><span class="line">            res=res*i/j;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>关于计算过程中的整除问题：</p><p>第一次（53 / 1）任何数都可整除1</p><p>第二次（53*52 / 1*2）连续的2个数中一定有一个是2的倍数</p><p>第三次（53*52*51 / 1*2*3）连续的3个数中一定有一个是3的倍数</p><p>以此类推，每次都可以整除</p>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      
      <comments>http://marksblog.cn/posts/d9271181/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-746-使用最小花费爬楼梯</title>
      <link>http://marksblog.cn/posts/403dae8f/</link>
      <guid>http://marksblog.cn/posts/403dae8f/</guid>
      <pubDate>Sun, 14 May 2023 16:01:26 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确定dp数组（dp table）以及下标的含义：使用 &lt;code&gt;dp[i]&lt;/code&gt; 作为动态规划数组，表示到达阶梯 &lt;code&gt;i&lt;/code&gt; 的最小花费&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确定递推公式：对于要到达第 &lt;code&gt;i&lt;/code&gt; 个楼梯，存在两种方案，第一种是从 &lt;code&gt;i-1&lt;/code&gt; 向前一步，或者从 &lt;code&gt;i-2&lt;/code&gt; 向前两步，对应的递推公式为： &lt;code&gt;dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dp数组如何初始化：对于 &lt;code&gt;dp[0]&lt;/code&gt; 应该初始化为0，对于 &lt;code&gt;dp[1]&lt;/code&gt; 也可以选择从1开始走，也初始化为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确定遍历顺序：此处需要求解的是 &lt;code&gt;dp[n+1]&lt;/code&gt; ，显而易见是从前向后遍历&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;举例推导dp数组：对于 &lt;code&gt;cost = [10,15,20]&lt;/code&gt; 那么 &lt;code&gt;dp[2]=min(0+15,0+10)=10&lt;/code&gt; , &lt;code&gt;dp[3]=min(10+20,0+15)=15&lt;/code&gt; 验证成立&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并且此处当前状态的决策只和前两个状态有关，因此可以在常数空间复杂度内实现。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-746-使用最小花费爬楼梯"><a href="#LeetCode-746-使用最小花费爬楼梯" class="headerlink" title="LeetCode  746 使用最小花费爬楼梯"></a>LeetCode  746 使用最小花费爬楼梯</h1><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></p><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ol><li><p>确定dp数组（dp table）以及下标的含义：使用 <code>dp[i]</code> 作为动态规划数组，表示到达阶梯 <code>i</code> 的最小花费</p></li><li><p>确定递推公式：对于要到达第 <code>i</code> 个楼梯，存在两种方案，第一种是从 <code>i-1</code> 向前一步，或者从 <code>i-2</code> 向前两步，对应的递推公式为： <code>dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])</code></p></li><li><p>dp数组如何初始化：对于 <code>dp[0]</code> 应该初始化为0，对于 <code>dp[1]</code> 也可以选择从1开始走，也初始化为0。</p></li><li><p>确定遍历顺序：此处需要求解的是 <code>dp[n+1]</code> ，显而易见是从前向后遍历</p></li><li><p>举例推导dp数组：对于 <code>cost = [10,15,20]</code> 那么 <code>dp[2]=min(0+15,0+10)=10</code> , <code>dp[3]=min(10+20,0+15)=15</code> 验证成立</p></li></ol><p>并且此处当前状态的决策只和前两个状态有关，因此可以在常数空间复杂度内实现。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 2 &lt;= cost.length无须特殊处理</span></span><br><span class="line">        <span class="type">int</span> n=cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>,dp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[<span class="number">2</span>]=<span class="built_in">min</span>(dp[<span class="number">1</span>]+cost[i<span class="number">-1</span>],dp[<span class="number">0</span>]+cost[i<span class="number">-2</span>]);</span><br><span class="line">            dp[<span class="number">0</span>]=dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>]=dp[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      
      <comments>http://marksblog.cn/posts/403dae8f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-70-爬楼梯</title>
      <link>http://marksblog.cn/posts/680ccd04/</link>
      <guid>http://marksblog.cn/posts/680ccd04/</guid>
      <pubDate>Sun, 14 May 2023 16:00:24 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;动态规划数组的下标及含义： &lt;code&gt;dp[i]&lt;/code&gt; 表示总计 &lt;code&gt;i&lt;/code&gt; 个楼梯的爬楼方式，总计的长度为n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递推公式： &lt;code&gt;dp[i]=dp[i-1]+dp[i-2]&lt;/code&gt; ，此处的理解可以使当前剩余 &lt;code&gt;i&lt;/code&gt; 阶楼梯，当前这一步分别走一步或者两步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dp数组的初始化：当 &lt;code&gt;i=1&lt;/code&gt; 时，明显不存在方法 &lt;code&gt;dp[1]=1&lt;/code&gt; ，当 &lt;code&gt;i=2&lt;/code&gt; 时，只能走一步 &lt;code&gt;dp[2]=2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历顺序：此处需要求解的是 &lt;code&gt;dp[n]&lt;/code&gt; 那么明显需要从前向后进行递推&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;举例推导：n=3 &lt;code&gt;dp[3]=dp[1]+dp[2]=3&lt;/code&gt; 满足要求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此处在初始化时，有一个较为重要的细节，就是对于 &lt;code&gt;dp[0]&lt;/code&gt; 的定义和初始化，从 &lt;code&gt;dp&lt;/code&gt; 数组的定义来看，此处的 &lt;code&gt;dp[0]&lt;/code&gt; 应该代表的是，总计0个阶梯有几种爬法，那么应该是不存在爬得方式，应该是初始化为0，但是如果使用 &lt;code&gt;dp[0],dp[1]&lt;/code&gt; 去计算 &lt;code&gt;dp[2]&lt;/code&gt; 将会得到错误的结果，因此此处不应该初始化 &lt;code&gt;dp[0]&lt;/code&gt; 将 &lt;code&gt;dp[1],dp[2]&lt;/code&gt; 作为初始值去计算。&lt;/p&gt;
&lt;p&gt;根据此处的递推公式：当前状态 &lt;code&gt;i&lt;/code&gt; 的决策，也只和前两个状态有关，那么只需要保存前两个状态的值，实现空间复杂度的化简。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-70-爬楼梯"><a href="#LeetCode-70-爬楼梯" class="headerlink" title="LeetCode 70 爬楼梯"></a>LeetCode 70 爬楼梯</h1><p><a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a></p><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ol><li><p>动态规划数组的下标及含义： <code>dp[i]</code> 表示总计 <code>i</code> 个楼梯的爬楼方式，总计的长度为n</p></li><li><p>递推公式： <code>dp[i]=dp[i-1]+dp[i-2]</code> ，此处的理解可以使当前剩余 <code>i</code> 阶楼梯，当前这一步分别走一步或者两步。</p></li><li><p>dp数组的初始化：当 <code>i=1</code> 时，明显不存在方法 <code>dp[1]=1</code> ，当 <code>i=2</code> 时，只能走一步 <code>dp[2]=2</code></p></li><li><p>遍历顺序：此处需要求解的是 <code>dp[n]</code> 那么明显需要从前向后进行递推</p></li><li><p>举例推导：n=3 <code>dp[3]=dp[1]+dp[2]=3</code> 满足要求</p></li></ol><p>此处在初始化时，有一个较为重要的细节，就是对于 <code>dp[0]</code> 的定义和初始化，从 <code>dp</code> 数组的定义来看，此处的 <code>dp[0]</code> 应该代表的是，总计0个阶梯有几种爬法，那么应该是不存在爬得方式，应该是初始化为0，但是如果使用 <code>dp[0],dp[1]</code> 去计算 <code>dp[2]</code> 将会得到错误的结果，因此此处不应该初始化 <code>dp[0]</code> 将 <code>dp[1],dp[2]</code> 作为初始值去计算。</p><p>根据此处的递推公式：当前状态 <code>i</code> 的决策，也只和前两个状态有关，那么只需要保存前两个状态的值，实现空间复杂度的化简。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>,dp[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            res=dp[<span class="number">0</span>]+dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>]=dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>]=res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      
      <comments>http://marksblog.cn/posts/680ccd04/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-509-斐波那契数</title>
      <link>http://marksblog.cn/posts/3f7ed50e/</link>
      <guid>http://marksblog.cn/posts/3f7ed50e/</guid>
      <pubDate>Sun, 14 May 2023 15:59:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;此处已经给定了相应的状态转移方程，当前的决策是和前两个状态相关的，那么就需要从前向后递推。使用动态规划求解的步骤如下：&lt;/p&gt;
&lt;p&gt;动规五部曲：&lt;/p&gt;
&lt;p&gt;这里我们要用一个一维dp数组来保存递归的结果&lt;/p&gt;
&lt;p&gt;1.确定dp数组以及下标的含义&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt; 的定义为：第i个数的斐波那契数值是 &lt;code&gt;dp[i]&lt;/code&gt; 由于在计算时只需要使用到前两个状态，那么在就只需要保存前两个序列即可。&lt;/p&gt;
&lt;p&gt;2.确定递推公式&lt;/p&gt;
&lt;p&gt;状态转移方程 &lt;code&gt;dp[i] = dp[i - 1] + dp[i - 2]&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;3.dp数组如何初始化&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-509-斐波那契数"><a href="#LeetCode-509-斐波那契数" class="headerlink" title="LeetCode 509 斐波那契数"></a>LeetCode 509 斐波那契数</h1><p><a href="https://leetcode.cn/problems/fibonacci-number/">509.斐波那契数</a></p><p>斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><blockquote><p>F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</p></blockquote><p>给定 <code>n</code> ，请计算 <code>F(n)</code> 。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>此处已经给定了相应的状态转移方程，当前的决策是和前两个状态相关的，那么就需要从前向后递推。使用动态规划求解的步骤如下：</p><p>动规五部曲：</p><p>这里我们要用一个一维dp数组来保存递归的结果</p><p>1.确定dp数组以及下标的含义</p><p><code>dp[i]</code> 的定义为：第i个数的斐波那契数值是 <code>dp[i]</code> 由于在计算时只需要使用到前两个状态，那么在就只需要保存前两个序列即可。</p><p>2.确定递推公式</p><p>状态转移方程 <code>dp[i] = dp[i - 1] + dp[i - 2]</code> ;</p><p>3.dp数组如何初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>4.确定遍历顺序</p><p>从递归公式 <code>dp[i] = dp[i - 1] + dp[i - 2]</code> ;中可以看出，<code>dp[i]</code> 是依赖 <code>dp[i - 1]</code> 和 <code>dp[i - 2]</code> ，那么遍历的顺序一定是从前到后遍历的</p><p>5.举例推导dp数组</p><p>按照这个递推公式 <code>dp[i] = dp[i - 1] + dp[i - 2]</code> ，我们来推导一下，当N为10的时候，<code>dp</code> 数组应该是如下的数列：</p><p>0 1 1 2 3 5 8 13 21 34 55</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> n==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[<span class="number">2</span>]=dp[<span class="number">0</span>]+dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>]=dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>]=dp[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">动态规划</category>
      
      
      <comments>http://marksblog.cn/posts/3f7ed50e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-101-对称二叉树</title>
      <link>http://marksblog.cn/posts/d8d7d1c6/</link>
      <guid>http://marksblog.cn/posts/d8d7d1c6/</guid>
      <pubDate>Thu, 11 May 2023 11:44:51 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;1-1-DFS实现&quot;&gt;&lt;a href=&quot;#1-1-DFS实现&quot; class=&quot;headerlink&quot; title=&quot;1.1 DFS实现&quot;&gt;&lt;/a&gt;1.1 DFS实现&lt;/h2&gt;&lt;p&gt;此处的轴对称问题，重点在于要明白如何进行比较，对于两个子树，首先是对比子树的根节点是否相等，接下来的对比过程应该是对比左边的左孩子和右边的右孩子是否相等，然后再左右交换。重点是在于明白对比的过程，然后就能否简单的基于递归实现。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-101-对称二叉树"><a href="#LeetCode-101-对称二叉树" class="headerlink" title="LeetCode 101 对称二叉树"></a>LeetCode 101 对称二叉树</h1><p><a href="https://leetcode.cn/problems/symmetric-tree/">101.对称二叉树</a></p><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><h2 id="1-1-DFS实现"><a href="#1-1-DFS实现" class="headerlink" title="1.1 DFS实现"></a>1.1 DFS实现</h2><p>此处的轴对称问题，重点在于要明白如何进行比较，对于两个子树，首先是对比子树的根节点是否相等，接下来的对比过程应该是对比左边的左孩子和右边的右孩子是否相等，然后再左右交换。重点是在于明白对比的过程，然后就能否简单的基于递归实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Symmetric</span><span class="params">(TreeNode *node1,TreeNode *node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1 &amp;&amp; node2 &amp;&amp; node1-&gt;val==node2-&gt;val)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Symmetric</span>(node1-&gt;left,node2-&gt;right)&amp;&amp;<span class="built_in">Symmetric</span>(node1-&gt;right,node2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!node1&amp;&amp;!node2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 基于DFS实现</span></span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Symmetric</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-基于迭代实现"><a href="#1-2-基于迭代实现" class="headerlink" title="1.2 基于迭代实现"></a>1.2 基于迭代实现</h2><p>使用一个队列，首先将根节点入队两次，每次出队两个连续的元素，再入队时采取交替入队的当时，假设node1和node2是队列中的初始状态，那么先两个元素出队，然后node1-&gt;left入队，node2-&gt;right入队。（本质上还是在利用轴对称的特性） 此处额外需要注意的就是对左右子树的是否为空需要进行额外的判断。在出队时进行值的判断，在入队时主要进行是否为空的判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123; <span class="comment">// 基于BFS实现</span></span><br><span class="line">       queue&lt;TreeNode*&gt; q;</span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">           TreeNode *node1=q.<span class="built_in">front</span>();</span><br><span class="line">           q.<span class="built_in">pop</span>();</span><br><span class="line">           <span class="keyword">if</span>(q.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           TreeNode *node2=q.<span class="built_in">front</span>();</span><br><span class="line">           q.<span class="built_in">pop</span>();</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;val!=node2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;left&amp;&amp;node2-&gt;right)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node1-&gt;left);</span><br><span class="line">                q.<span class="built_in">push</span>(node2-&gt;right);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(!node1-&gt;left&amp;&amp;node2-&gt;right||node1-&gt;left&amp;&amp;!node2-&gt;right)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(node1-&gt;right&amp;&amp;node2-&gt;left)&#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node1-&gt;right);</span><br><span class="line">                q.<span class="built_in">push</span>(node2-&gt;left);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(!node1-&gt;right&amp;&amp;node2-&gt;left||node1-&gt;right&amp;&amp;!node2-&gt;left)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/d8d7d1c6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-37-解数独</title>
      <link>http://marksblog.cn/posts/7cec8f62/</link>
      <guid>http://marksblog.cn/posts/7cec8f62/</guid>
      <pubDate>Thu, 11 May 2023 11:41:49 GMT</pubDate>
      
      <description>&lt;p&gt;本质上就是给定一个 $9&#92;times9$ 的二维矩阵，使用1-9对该二维矩阵进行补全。在补全矩阵后需要保证，在矩阵的每一行每一列中都不存在重复元素。并且在9个 $3&#92;times3$ 的小方框中不存在重复的元素。并且这样的求解有且仅有一个。&lt;/p&gt;
&lt;p&gt;采取逐行放置的方式：设计一个递归地回溯函数  &lt;code&gt;bool backtrack(int row,int col,vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board)&lt;/code&gt; ，向函数传递的参数值为 &lt;code&gt;row&lt;/code&gt; 行号和 &lt;code&gt;col&lt;/code&gt; 列号，每一次仅填写 &lt;code&gt;board[row][col]&lt;/code&gt;  位置处的元素，返回值为bool类型，表示本地递归是否找到了可行的解。首先判断 &lt;code&gt;board[row][col]&lt;/code&gt; 位置处的元素是否是 &lt;code&gt;.&lt;/code&gt; 若不是，则直接 &lt;code&gt;col+1&lt;/code&gt; 向下递归，并且直接返回递归函数的返回值。&lt;/p&gt;
&lt;p&gt;若是则使用一个hash &lt;code&gt;used[9]&lt;/code&gt; 记录，在 &lt;code&gt;board[row][col]&lt;/code&gt; 处那些元素是使用过的。首先是按行列进行统计，再按 $3&#92;times3$ 的宫格进行统计。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; used[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]=&amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board[row].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();i++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 处理行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[row][i]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) used[board[row][i]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();i++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 处理列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][col]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) used[board[i][col]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 处理粗线宫格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=row/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;row/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j=col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;j&amp;lt;col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]!=&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            used[board[i][j]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-37-解数独"><a href="#LeetCode-37-解数独" class="headerlink" title="LeetCode 37 解数独"></a>LeetCode 37 解数独</h1><p><a href="https://leetcode.cn/problems/sudoku-solver/">37.解数独</a></p><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 遵循如下规则：</p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</p><ol><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 ‘.’</li><li>题目数据保证输入数独仅有一个解</li></ol><h2 id="回溯递归"><a href="#回溯递归" class="headerlink" title="回溯递归"></a>回溯递归</h2><p>本质上就是给定一个 $9\times9$ 的二维矩阵，使用1-9对该二维矩阵进行补全。在补全矩阵后需要保证，在矩阵的每一行每一列中都不存在重复元素。并且在9个 $3\times3$ 的小方框中不存在重复的元素。并且这样的求解有且仅有一个。</p><p>采取逐行放置的方式：设计一个递归地回溯函数  <code>bool backtrack(int row,int col,vector&lt;vector&lt;char&gt;&gt;&amp; board)</code> ，向函数传递的参数值为 <code>row</code> 行号和 <code>col</code> 列号，每一次仅填写 <code>board[row][col]</code>  位置处的元素，返回值为bool类型，表示本地递归是否找到了可行的解。首先判断 <code>board[row][col]</code> 位置处的元素是否是 <code>.</code> 若不是，则直接 <code>col+1</code> 向下递归，并且直接返回递归函数的返回值。</p><p>若是则使用一个hash <code>used[9]</code> 记录，在 <code>board[row][col]</code> 处那些元素是使用过的。首先是按行列进行统计，再按 $3\times3$ 的宫格进行统计。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> used[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board[row].<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理行</span></span><br><span class="line">    <span class="keyword">if</span>(board[row][i]!=<span class="string">&#x27;.&#x27;</span>) used[board[row][i]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理列</span></span><br><span class="line">    <span class="keyword">if</span>(board[i][col]!=<span class="string">&#x27;.&#x27;</span>) used[board[i][col]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理粗线宫格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=row/<span class="number">3</span>*<span class="number">3</span>;i&lt;row/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=col/<span class="number">3</span>*<span class="number">3</span>;j&lt;col/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            used[board[i][j]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成统计后则开始尝试向 <code>board[row][col]</code> 处填入元素，填入元素后 <code>col+1</code> 向下递归。</p><p>当 <code>col==board.size()</code> 时说明当前 <code>row</code> 行已经填完，那么 <code>backtrack(row+1,0, board)</code> 向下递归。并且将递归函数的结果直接返回，递归结束的条件： <code>row==board.size()</code> 时，说明已经完成了矩阵中全部元素的处理。</p><p>总体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==board.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(col==board.<span class="built_in">size</span>())&#123; <span class="comment">// row行完成填写</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row+<span class="number">1</span>,<span class="number">0</span>,board))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(board[row][col]!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">// 已填数字</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row,col+<span class="number">1</span>,board))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> used[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board[row].<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理行</span></span><br><span class="line">            <span class="keyword">if</span>(board[row][i]!=<span class="string">&#x27;.&#x27;</span>) used[board[row][i]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.<span class="built_in">size</span>();i++)&#123; <span class="comment">// 处理列</span></span><br><span class="line">            <span class="keyword">if</span>(board[i][col]!=<span class="string">&#x27;.&#x27;</span>) used[board[i][col]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理粗线宫格</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=row/<span class="number">3</span>*<span class="number">3</span>;i&lt;row/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=col/<span class="number">3</span>*<span class="number">3</span>;j&lt;col/<span class="number">3</span>*<span class="number">3</span>+<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    used[board[i][j]-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">                board[row][col]=<span class="string">&#x27;1&#x27;</span>+i;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">backtrack</span>(row,col+<span class="number">1</span>,board))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                board[row][col]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">backtrack</span>(<span class="number">0</span>,<span class="number">0</span>,board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一种处理思路：在递归函数中使用双层的for循环，按照行进行处理，每次逐行去寻找第一个未被填入的元素，向其中填入相应的元素，并判断填入的元素是否合法。</p>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/7cec8f62/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-51-N皇后</title>
      <link>http://marksblog.cn/posts/3f5ed361/</link>
      <guid>http://marksblog.cn/posts/3f5ed361/</guid>
      <pubDate>Tue, 09 May 2023 13:54:30 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;双hash-回溯递归&quot;&gt;&lt;a href=&quot;#双hash-回溯递归&quot; class=&quot;headerlink&quot; title=&quot;双hash+回溯递归&quot;&gt;&lt;/a&gt;双hash+回溯递归&lt;/h2&gt;&lt;p&gt;此处采取逐行去填充元素位置的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bool col[9]=&amp;#123;false&amp;#125;;&lt;/code&gt; 记录那些列被使用了，通过记录和逐行填充的方式实现了行列的不冲突&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; pos;&lt;/code&gt; 记录每一行所使用的列号用于判断是否会出现的在同一斜线上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本的递归流程：递归的参数为 &lt;code&gt;n,cur&lt;/code&gt; 分表表示皇后的个数和当前处理的行数（从0开始），那么当 &lt;code&gt;cur==n&lt;/code&gt; 时递归结束，将本次递归的结果集加入到结果集中。 &lt;code&gt;cur&lt;/code&gt; 行放置位置的选取，从0开始逐个判断，是否和前面已选元素在同行和同列，或者在一条斜线上，不是则选取后递归，递归返回后再进行回溯。&lt;/p&gt;
&lt;p&gt;是否在同一斜线上的判断：利用 &lt;code&gt;pos&lt;/code&gt; 数组进行判断，主要是看二维坐标中的点，行距和列距是否相同。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isSlash&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 第i行，第j列处的元素是否和前面的元素处于同一斜线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;a:pos)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a.first-i)==&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a.second-j)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-51-N皇后"><a href="#LeetCode-51-N皇后" class="headerlink" title="LeetCode 51 N皇后"></a>LeetCode 51 N皇后</h1><p><a href="https://leetcode.cn/problems/n-queens/">51.N皇后</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位</p><h2 id="双hash-回溯递归"><a href="#双hash-回溯递归" class="headerlink" title="双hash+回溯递归"></a>双hash+回溯递归</h2><p>此处采取逐行去填充元素位置的方式：</p><ol><li><code>bool col[9]=&#123;false&#125;;</code> 记录那些列被使用了，通过记录和逐行填充的方式实现了行列的不冲突</li><li><code>vector&lt;pair&lt;int,int&gt;&gt; pos;</code> 记录每一行所使用的列号用于判断是否会出现的在同一斜线上</li></ol><p>基本的递归流程：递归的参数为 <code>n,cur</code> 分表表示皇后的个数和当前处理的行数（从0开始），那么当 <code>cur==n</code> 时递归结束，将本次递归的结果集加入到结果集中。 <code>cur</code> 行放置位置的选取，从0开始逐个判断，是否和前面已选元素在同行和同列，或者在一条斜线上，不是则选取后递归，递归返回后再进行回溯。</p><p>是否在同一斜线上的判断：利用 <code>pos</code> 数组进行判断，主要是看二维坐标中的点，行距和列距是否相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSlash</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123; <span class="comment">// 第i行，第j列处的元素是否和前面的元素处于同一斜线</span></span><br><span class="line">        <span class="keyword">if</span>(pos.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a.first-i)==<span class="built_in">abs</span>(a.second-j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总体代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">    vector&lt;string&gt; tmp;</span><br><span class="line">    <span class="type">bool</span> col[<span class="number">9</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; pos;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSlash</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123; <span class="comment">// 第i行，第j列处的元素是否和前面的元素处于同一斜线</span></span><br><span class="line">        <span class="keyword">if</span>(pos.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;a:pos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a.first-i)==<span class="built_in">abs</span>(a.second-j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> cur,<span class="type">int</span> n)</span></span>&#123; <span class="comment">// 逐行放置</span></span><br><span class="line">        <span class="keyword">if</span>(cur==n)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123; <span class="comment">// cur行位置的选取</span></span><br><span class="line">            <span class="keyword">if</span>(!col[i]&amp;&amp;!<span class="built_in">isSlash</span>(cur,i))&#123; <span class="comment">// 和前面的行，不在同一列，并且不在同一斜线</span></span><br><span class="line">                col[i]=<span class="literal">true</span>;</span><br><span class="line">                pos.<span class="built_in">push_back</span>(&#123;cur,i&#125;);</span><br><span class="line">                <span class="function">string <span class="title">s</span><span class="params">(n,<span class="string">&#x27;.&#x27;</span>)</span></span>;</span><br><span class="line">                s[i]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(s);</span><br><span class="line">                <span class="built_in">DFS</span>(cur+<span class="number">1</span>,n);</span><br><span class="line">                col[i]=<span class="literal">false</span>;</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">                pos.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">DFS</span>(<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/">回溯法</category>
      
      
      <comments>http://marksblog.cn/posts/3f5ed361/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode-104-111-二叉树的最大最小深度</title>
      <link>http://marksblog.cn/posts/c76534fb/</link>
      <guid>http://marksblog.cn/posts/c76534fb/</guid>
      <pubDate>Mon, 08 May 2023 14:28:02 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-depth-of-binary-tree/&quot;&gt;104.二叉树的最大深度&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-104-111-二叉树的最大最小深度"><a href="#LeetCode-104-111-二叉树的最大最小深度" class="headerlink" title="LeetCode 104 111 二叉树的最大最小深度"></a>LeetCode 104 111 二叉树的最大最小深度</h1><h2 id="1-1-二叉树的最大深度"><a href="#1-1-二叉树的最大深度" class="headerlink" title="1.1 二叉树的最大深度"></a>1.1 二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度</a></p><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><h3 id="1-1-1-DFS实现"><a href="#1-1-1-DFS实现" class="headerlink" title="1.1.1 DFS实现"></a>1.1.1 DFS实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left),<span class="built_in">maxDepth</span>(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-BFS实现"><a href="#1-1-2-BFS实现" class="headerlink" title="1.1.2 BFS实现"></a>1.1.2 BFS实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       queue&lt;TreeNode*&gt; q;</span><br><span class="line">       q.<span class="built_in">push</span>(root);</span><br><span class="line">       <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">           <span class="type">int</span> n=q.<span class="built_in">size</span>();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               TreeNode* node=q.<span class="built_in">front</span>();</span><br><span class="line">               q.<span class="built_in">pop</span>();</span><br><span class="line">               <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">               <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">           &#125;</span><br><span class="line">           depth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-二叉树的最小深度"><a href="#1-2-二叉树的最小深度" class="headerlink" title="1.2 二叉树的最小深度"></a>1.2 二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111.二叉树的最小深度</a></p><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><h3 id="1-2-1-DFS实现"><a href="#1-2-1-DFS实现" class="headerlink" title="1.2.1 DFS实现"></a>1.2.1 DFS实现</h3><p>相对复杂的遍历实现方式：找到叶子节点，就算深度，寻找最小深度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> min_d=<span class="number">2147483647</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(TreeNode* root,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right)&#123;</span><br><span class="line">                min_d=<span class="built_in">min</span>(min_d,depth);   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">DFS</span>(root-&gt;left,depth);</span><br><span class="line">            <span class="built_in">DFS</span>(root-&gt;right,depth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">DFS</span>(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> min_d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问题划分实现：返回左右子树的最小深度。此处和最大深度之间存在一个差别，每次返回子树的最小深度+1的处理方式，只有当结点的左右子树都非空的情况才是正确的。当只有一个节点时，需要返回的是存在节点的大小。(主要是需要处理好空节点的问题，不能单纯的选取最小，应该在两颗子树非空的情况下选取最小)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> min_d=INT_MAX;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">            min_d=<span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left),min_d);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">            min_d=<span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;right),min_d);       </span><br><span class="line">        <span class="keyword">return</span> min_d+<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-BFS实现"><a href="#1-2-2-BFS实现" class="headerlink" title="1.2.2 BFS实现"></a>1.2.2 BFS实现</h3><p>BFS的方式层序遍历的，那么对于最小深度的叶节点一定是最先的入队，那么只需要找到第一个入队的叶节点即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span>  n=q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">                TreeNode *node=q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(!node-&gt;left&amp;&amp;!node-&gt;right) <span class="keyword">return</span> depth+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://marksblog.cn/categories/LeetCode/">LeetCode</category>
      
      
      <category domain="http://marksblog.cn/tags/c/">c++</category>
      
      <category domain="http://marksblog.cn/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://marksblog.cn/tags/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/">树和二叉树</category>
      
      
      <comments>http://marksblog.cn/posts/c76534fb/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
